# this is a copy of the tree-building part of prog
# it dumps the memory out after constructing tree
# this ensures that the algorithm is followed exactly

# build histogram
cal l_build_hist
# build tree
cal l_build_tree

# debug output
mov r1, 2
mov r2, l_tree
mov r3, 2
sys S_write
mov r1, 2
mov r2, 0
mov r3, 0x2000
sys S_write

mov r1, 0
sys S_exit

l_nodebuf_ptr:
.ptr l_nodebuf
l_nodebuf:
.var 2048
l_alloc:
mov r0, [l_nodebuf_ptr]
add [l_nodebuf_ptr], 4
ret

# build histogram
l_freqname:
.str b'../prog.bin\x00'
l_freqbuf:
.var 1
l_freq:
.var 256
l_freqfd:
.var 1
l_build_hist:
mov r1, l_freqname
xor r2, r2
xor r3, r3
sys S_open
mov [l_freqfd], r0
l_freq_read:
mov r1, [l_freqfd]
mov r2, l_freqbuf
mov r3, 1
sys S_read
cet r0, 0
jpt l_freq_done
mov r0, [l_freqbuf]
and r0, 0xff
add r0, l_freq
mov r1, [r0]
add r1, 1
mov [r0], r1
jmp l_freq_read
l_freq_done:
mov r1, [l_freqfd]
sys S_close
ret

# make tree
l_tree:
.var 256
l_tree_i:
.var 1
l_tree_smallest_a:
.var 1
l_tree_smallest_b:
.var 1
l_build_tree:
# make leaves
xor r3, r3
jmp l_build_tree_make_leaves_end
l_build_tree_make_leaves_next:
mov r2, r3
add r2, l_freq
mov r1, [r2]
cet r1, 0
jpt l_build_tree_make_leaves_skip
cal l_alloc
mov r2, [l_tree_i]
add r2, l_tree
mov [r2], r0
mov r2, [l_tree_i]
add r2, 1
mov [l_tree_i], r2
mov [r0], r3
add r0, 1
mov [r0], r1
l_build_tree_make_leaves_skip:
add r3, 1
l_build_tree_make_leaves_end:
clt r3, 256
jpt l_build_tree_make_leaves_next
jmp l_build_tree_combine_end
l_build_tree_combine_next:
# remove two smallest
cal l_build_tree_find_smallest
mov r1, r0
add r0, l_tree
mov [l_tree_smallest_a], [r0]
cal l_build_tree_remove

cal l_build_tree_find_smallest
mov r1, r0
add r0, l_tree
mov [l_tree_smallest_b], [r0]
cal l_build_tree_remove

# make new node
cal l_alloc
mov r2, [l_tree_i]
add r2, l_tree
mov [r2], r0
mov r2, [l_tree_i]
add r2, 1
mov [l_tree_i], r2

# add freqs
add r0, 1
mov r1, [l_tree_smallest_a]
add r1, 1
add [r0], [r1]
mov r1, [l_tree_smallest_b]
add r1, 1
add [r0], [r1]
# left
add r0, 1
mov [r0], [l_tree_smallest_a]
# right
add r0, 1
mov [r0], [l_tree_smallest_b]
l_build_tree_combine_end:
cgt [l_tree_i], 1
jpt l_build_tree_combine_next
ret

# remove from array
l_build_tree_remove:
mov r0, r1
add r0, l_tree
mov r2, r0
add r1, 1
add r2, 1
jmp l_build_tree_remove_end
l_build_tree_remove_next:
mov [r0], [r2]
add r0, 1
add r1, 1
add r2, 1
l_build_tree_remove_end:
clt r1, [l_tree_i]
jpt l_build_tree_remove_next
sub [l_tree_i], 1
ret

# find smallest
l_build_tree_find_smallest:
xor r1, r1
mov r2, 0xffff
xor r3, r3
jmp l_build_tree_find_smallest_end
l_build_tree_find_smallest_next:
mov r0, r1
add r0, l_tree
mov r0, [r0]
add r0, 1
clt [r0], r2
jpf l_build_tree_find_smallest_skip
mov r2, [r0]
mov r3, r1
l_build_tree_find_smallest_skip:
add r1, 1
l_build_tree_find_smallest_end:
clt r1, [l_tree_i]
jpt l_build_tree_find_smallest_next
mov r0, r3
ret
